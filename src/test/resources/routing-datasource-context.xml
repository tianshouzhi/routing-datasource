<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:annotation-config/>

    <context:property-placeholder location="classpath*:jdbc.properties"/>

    <!--配置RoutingDataSource，其管理了ds1和ds2-->
    <bean id="routingDataSource" class="io.github.tianshouzhi.routing.RoutingDataSource">
        <property name="targetDataSources">
            <map>
                <!--entry的key，将在稍后将看到的@Routing注解中使用到-->
                <entry key="ds1">
                    <!--配置ds1，访问数据库db1-->
                    <bean class="org.apache.ibatis.datasource.pooled.PooledDataSource">
                        <property name="username" value="${ds1.username}"/>
                        <property name="password" value="${ds1.password}"/>
                        <property name="url" value="${ds1.url}"/>
                        <property name="driver" value="${ds1.driver}"/>
                    </bean>
                </entry>
                <entry key="ds2">
                    <!--配置ds2，访问数据库db2-->
                    <bean class="org.apache.ibatis.datasource.pooled.PooledDataSource">
                        <property name="username" value="${ds2.username}"/>
                        <property name="password" value="${ds2.password}"/>
                        <property name="url" value="${ds2.url}"/>
                        <property name="driver" value="${ds2.driver}"/>
                    </bean>
                </entry>
            </map>
        </property>
        <property name="packageDataSourceKeyMap">
            <map>
                <entry key="io.github.tianshouzhi.routing.mapper.db2" value="ds2"/>
            </map>
        </property>
        <!--配置默认数据源，在RoutingDataSource无法确定使用哪个数据源时，将会使用默认的数据源-->
        <property name="defaultTargetDataSource" value="ds1"/>
    </bean>

    <!--配置mybatis的SqlSessionFactoryBean，注入datasource属性引用的是routingDataSource-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="routingDataSource"/>
        <!--注意，本案例将sql编写在mybatis映射器接口上，不需要配置mapperLocations属性，如果你sql写在xml中，需要打开一下配置-->
        <!--<property name="mapperLocations" value="classpath*:config/sqlmap/**/*.xml" />-->
    </bean>
    <!--配置MapperScannerConfigurer-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--UserMapper和UserAccountMapper位于此包中-->
        <property name="basePackage" value="io.github.tianshouzhi.routing.mapper"/>
    </bean>

    <!--该bean需要操作事务-->
    <bean id="multiDBService" class="io.github.tianshouzhi.routing.service.MultiDBService"/>

    <!--事务管理器配置，datasource属性引用的也是routingDataSource-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="routingDataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>